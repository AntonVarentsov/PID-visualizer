{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository",
        "description": "Initialize the project repository with the necessary structure and dependencies.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "details": "The project repository is already initialized with FastAPI backend, React frontend with TypeScript, PostgreSQL database, and a PDF viewer with scaling. ESLint and Prettier are configured. The remaining tasks include integrating Google Cloud Vision API for OCR in the backend, expanding the database schema for projects and corrosion loops, creating directories for storing PDFs by project, and setting up stubs for external APIs.",
        "testStrategy": "Verify the integration of Google Cloud Vision API by checking its functionality in the backend. Ensure the database schema is expanded correctly, directories for PDFs are created and accessible, and stubs for external APIs are functioning as expected.",
        "subtasks": [
          {
            "id": 1,
            "title": "Инициализация Git-репозитория и настройка структуры проекта",
            "description": "Создать новый Git-репозиторий и организовать структуру проекта, включая каталоги для фронтенда, бэкенда и общих ресурсов.",
            "status": "done",
            "dependencies": [],
            "details": "Создайте новый репозиторий с помощью команды `git init`. Затем создайте основные каталоги: `frontend/` для React-приложения, `backend/` для FastAPI-сервера и `shared/` для общих ресурсов. Убедитесь, что структура проекта соответствует существующей архитектуре.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Интеграция Google Cloud Vision API в FastAPI-бэкенд",
            "description": "Добавить Google Cloud Vision API клиент в FastAPI-бэкенд для обработки изображений.",
            "status": "pending",
            "dependencies": [],
            "details": "Добавьте Google Cloud Vision API клиент в файл `requirements.txt` в каталоге `backend/`. Настройте аутентификацию с помощью Service Account. Убедитесь, что API интегрирован в существующие маршруты FastAPI для обработки изображений.",
            "testStrategy": "Проверьте установку Google Cloud Vision API клиента и его функциональность в существующих маршрутах FastAPI."
          },
          {
            "id": 3,
            "title": "Расширение схемы базы данных для проектов и corrosion loops",
            "description": "Обновить схему базы данных PostgreSQL для поддержки новых сущностей проектов и corrosion loops.",
            "status": "pending",
            "dependencies": [],
            "details": "Добавьте новые таблицы и поля в существующую схему базы данных PostgreSQL для поддержки сущностей проектов и corrosion loops. Убедитесь, что изменения совместимы с текущей архитектурой базы данных.",
            "testStrategy": "Проверьте, что новые таблицы и поля корректно созданы и доступны для операций CRUD."
          },
          {
            "id": 4,
            "title": "Создание каталогов для хранения PDF по проектам",
            "description": "Создать структуру каталогов для хранения PDF-файлов, организованных по проектам.",
            "status": "pending",
            "dependencies": [],
            "details": "В корневом каталоге проекта создайте структуру каталогов для хранения PDF-файлов, организованных по проектам. Убедитесь, что структура поддерживает легкий доступ и управление файлами.",
            "testStrategy": "Проверьте, что каталоги созданы и доступны для записи и чтения PDF-файлов."
          },
          {
            "id": 5,
            "title": "Создание заглушек для внешних API",
            "description": "Создать заглушки для интеграции с внешними API, включая OCR и группировку loops.",
            "status": "pending",
            "dependencies": [],
            "details": "Определите требования к интерфейсам внешних сервисов и создайте заглушки для их интеграции. Убедитесь, что заглушки позволяют тестировать взаимодействие с внешними API без реальных вызовов.",
            "testStrategy": "Проверьте, что заглушки корректно имитируют взаимодействие с внешними API и позволяют тестировать функциональность системы."
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Project Management Backend",
        "description": "Expand the existing backend functionality to include project management features.",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "Extend the current FastAPI setup with SQLAlchemy and PostgreSQL to include new models and endpoints. Add models for projects and corrosion_loops in models.py. Expand Pydantic schemas to accommodate new models. Implement additional endpoints for managing projects, ensuring they are RESTful and follow best practices for API design.",
        "testStrategy": "Test each new API endpoint using Postman or a similar tool to ensure correct functionality. Validate database operations through unit tests using pytest.",
        "subtasks": [
          {
            "id": 1,
            "title": "Разработка моделей данных и схем с использованием SQLAlchemy и Pydantic",
            "description": "Создать модели данных для управления проектами с помощью SQLAlchemy и соответствующие схемы Pydantic для валидации данных.",
            "status": "pending",
            "dependencies": [],
            "details": "Определить модели данных, такие как Project, Task и User, используя SQLAlchemy. Создать соответствующие схемы Pydantic для валидации входных и выходных данных API.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Реализация CRUD-эндпоинтов в FastAPI для управления проектами",
            "description": "Создать эндпоинты в FastAPI для операций создания, чтения, обновления и удаления проектов, задач и пользователей.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Используя созданные модели и схемы, разработать эндпоинты для CRUD-операций, обеспечивая соответствие принципам RESTful API.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Интеграция FastAPI с PostgreSQL через SQLAlchemy",
            "description": "Настроить подключение FastAPI к базе данных PostgreSQL с использованием SQLAlchemy.",
            "status": "pending",
            "dependencies": [
              1,
              2
            ],
            "details": "Настроить соединение с PostgreSQL, используя SQLAlchemy, и обеспечить взаимодействие с базой данных через созданные модели.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Разработка модульных тестов для эндпоинтов FastAPI с использованием pytest",
            "description": "Написать модульные тесты для всех эндпоинтов FastAPI, обеспечивая их корректную работу.",
            "status": "pending",
            "dependencies": [
              2,
              3
            ],
            "details": "Используя pytest, разработать тесты для проверки функциональности каждого эндпоинта, включая позитивные и негативные сценарии.",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Добавление модели projects и corrosion_loops в models.py",
            "description": "Расширить существующие модели, добавив новые модели для управления проектами и коррозионными петлями.",
            "status": "pending",
            "dependencies": [],
            "details": "Добавить модели projects и corrosion_loops в файл models.py, используя SQLAlchemy.",
            "testStrategy": "Проверить корректность создания моделей и их взаимодействие с базой данных через тесты."
          },
          {
            "id": 6,
            "title": "Расширение схем Pydantic для новых моделей",
            "description": "Обновить схемы Pydantic для поддержки новых моделей данных.",
            "status": "pending",
            "dependencies": [
              5
            ],
            "details": "Создать и обновить схемы Pydantic для моделей projects и corrosion_loops для валидации данных.",
            "testStrategy": "Проверить валидацию данных через тесты, убедившись в корректной работе схем."
          },
          {
            "id": 7,
            "title": "Добавление новых эндпоинтов для управления проектами",
            "description": "Создать новые эндпоинты в FastAPI для управления проектами, включая создание, обновление и удаление.",
            "status": "pending",
            "dependencies": [
              5,
              6
            ],
            "details": "Разработать новые эндпоинты для управления проектами, следуя принципам RESTful API.",
            "testStrategy": "Тестировать новые эндпоинты с использованием Postman или аналогичного инструмента для проверки их функциональности."
          }
        ]
      },
      {
        "id": 3,
        "title": "Develop PDF Upload and Storage",
        "description": "Implement functionality for uploading and storing PDF files associated with projects.",
        "details": "Create a FastAPI endpoint for uploading PDF files. Use SQLAlchemy to store file metadata in the database. Implement file storage using a secure directory structure. Ensure files are linked to projects via foreign keys.",
        "testStrategy": "Upload sample PDFs and verify their storage and metadata entry in the database. Check file retrieval and deletion operations.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Создание FastAPI эндпоинта для загрузки PDF-файлов",
            "description": "Разработать эндпоинт в FastAPI для приема и обработки загрузки PDF-файлов с фронтенда.",
            "dependencies": [],
            "details": "Использовать существующий FastAPI бэкенд для создания эндпоинта, принимающего файлы с помощью UploadFile. Обеспечить обработку файлов формата PDF и валидацию их типа.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Реализация хранения метаданных PDF-файлов с использованием SQLAlchemy",
            "description": "Настроить модель данных в SQLAlchemy для хранения метаданных загруженных PDF-файлов в базе данных PostgreSQL.",
            "dependencies": [
              1
            ],
            "details": "Создать модель SQLAlchemy с полями для хранения информации о файле, такой как имя файла, размер, дата загрузки и путь к файлу. Интегрировать эту модель с существующей базой данных PostgreSQL.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Настройка безопасного хранения PDF-файлов",
            "description": "Организовать безопасное хранение загруженных PDF-файлов на сервере или в облачном хранилище.",
            "dependencies": [
              1,
              2
            ],
            "details": "Использовать существующую инфраструктуру для хранения файлов, обеспечивая контроль доступа и защиту данных. Рассмотреть использование локального хранилища или облачных сервисов, совместимых с текущей архитектурой.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Integrate EasyOCR for Line Number Recognition",
        "description": "Set up OCR functionality using Google Cloud Vision API to recognize line numbers in uploaded PDFs.",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "medium",
        "details": "Install and configure Google Cloud Vision API in the backend. Develop a FastAPI endpoint to process PDFs and extract line numbers using the Vision API. Implement error handling and logging for OCR operations. Set up authentication through a Service Account and create a stub for the OCR service with a clear API interface. Define input/output requirements for the OCR API for the external team.\n<info added on 2025-06-23T18:13:19.839Z>\nIntegrate Google Cloud Vision API for Line Number Recognition\n</info added on 2025-06-23T18:13:19.839Z>",
        "testStrategy": "Test OCR functionality with various PDF samples to ensure accurate line number recognition using Google Cloud Vision API. Validate error handling by simulating OCR failures. Ensure that the authentication and API interface function correctly.",
        "subtasks": [
          {
            "id": 1,
            "title": "Установка и настройка EasyOCR",
            "description": "Установить библиотеку EasyOCR и настроить её для распознавания номеров строк в PDF-документах.",
            "status": "pending",
            "dependencies": [],
            "details": "Установить EasyOCR с помощью pip и убедиться, что все необходимые зависимости установлены. Провести тестирование распознавания текста на образцах PDF, чтобы убедиться в корректной работе.\n<info added on 2025-06-23T18:13:34.014Z>\nУстановить google-cloud-vision с помощью pip. Настроить Service Account для аутентификации. Настроить GOOGLE_APPLICATION_CREDENTIALS. Провести тестирование распознавания текста на образцах PDF.\n</info added on 2025-06-23T18:13:34.014Z>",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Разработка FastAPI эндпоинта для обработки PDF",
            "description": "Создать эндпоинт в FastAPI для загрузки PDF-файлов и обработки их с использованием EasyOCR.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Разработать эндпоинт, который принимает PDF-файл, извлекает его содержимое и использует EasyOCR для распознавания номеров строк. Убедиться, что эндпоинт интегрирован с существующей архитектурой FastAPI и взаимодействует с PostgreSQL для хранения результатов.\n<info added on 2025-06-23T18:13:48.874Z>\nСоздать эндпоинт в FastAPI для загрузки PDF-файлов и обработки их с использованием Google Cloud Vision API. Разработать эндпоинт, который принимает PDF-файл, извлекает его содержимое и использует Google Cloud Vision API для распознавания номеров строк. Убедиться, что эндпоинт интегрирован с существующей архитектурой FastAPI и взаимодействует с PostgreSQL для хранения результатов.\n</info added on 2025-06-23T18:13:48.874Z>",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Реализация обработки ошибок в FastAPI",
            "description": "Внедрить обработку ошибок в FastAPI для обеспечения надежности при обработке PDF-файлов.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Создать глобальные обработчики исключений для различных типов ошибок, включая ошибки валидации, ошибки базы данных и неожиданные исключения. Убедиться, что обработчики возвращают информативные сообщения об ошибках и соответствующие коды состояния HTTP. Например, можно создать обработчик для RequestValidationError, который возвращает статус 422 и подробности ошибки.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Настройка механизмов логирования в FastAPI",
            "description": "Настроить логирование в FastAPI для мониторинга и отладки процесса обработки PDF-файлов.",
            "status": "pending",
            "dependencies": [
              3
            ],
            "details": "Использовать встроенный модуль logging для настройки логирования. Определить уровни логирования (INFO, ERROR и т.д.) и форматы сообщений. Убедиться, что логи записываются в файл и/или выводятся в консоль. Например, можно настроить логирование с помощью logging.basicConfig(level=logging.INFO) и создать логгер с помощью logging.getLogger(__name__).",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Настройка Google Cloud Vision API",
            "description": "Настроить Google Cloud Vision API для распознавания номеров строк в PDF-документах.",
            "status": "pending",
            "dependencies": [],
            "details": "Настроить аутентификацию через Service Account и интегрировать Google Cloud Vision API в проект. Убедиться, что все необходимые разрешения и конфигурации установлены.",
            "testStrategy": "Проверить, что аутентификация и доступ к API работают корректно."
          },
          {
            "id": 6,
            "title": "Создание заглушки для OCR сервиса",
            "description": "Создать заглушку для OCR сервиса с четким API интерфейсом.",
            "status": "pending",
            "dependencies": [
              5
            ],
            "details": "Определить и реализовать API интерфейс для OCR сервиса, который принимает PDF файл (base64 или URL) и параметры распознавания (языки, типы документов).",
            "testStrategy": "Убедиться, что заглушка корректно принимает входные данные и возвращает ожидаемый формат данных."
          },
          {
            "id": 7,
            "title": "Определение требований к входным/выходным данным OCR API",
            "description": "Определить требования к входным и выходным данным для OCR API, которые будут использоваться внешней командой.",
            "status": "pending",
            "dependencies": [
              6
            ],
            "details": "Документировать формат входных данных (PDF файл, параметры распознавания) и выходных данных (распознанный текст с координатами, confidence scores, метаданные о качестве распознавания).",
            "testStrategy": "Проверить, что документация соответствует требованиям и понятна для внешней команды."
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Corrosion Loop Grouping Logic",
        "description": "Develop logic for integrating with an external service for grouping line numbers into corrosion loops based on predefined rules.",
        "status": "pending",
        "dependencies": [
          4
        ],
        "priority": "medium",
        "details": "Create a stub for the external grouping service. Define clear API requirements for the loop grouping service. Create mock data for testing. The external service should accept a list of line_numbers with coordinates, document metadata (sizes, type), and grouping parameters (algorithm, settings). It should return groups of line_numbers (corrosion loops), confidence scores for each group, visual connections between group elements, and recommendations for group adjustments.",
        "testStrategy": "Test the integration with the external service using mock data to ensure correct loop formation and data exchange. Validate the API requirements and the handling of returned data, including confidence scores and visual connections.",
        "subtasks": [
          {
            "id": 1,
            "title": "Разработка правил группировки для коррозионных петель",
            "description": "Определить и документировать правила группировки линий в коррозионные петли на основе существующих данных и требований.",
            "status": "pending",
            "dependencies": [],
            "details": "Анализировать текущие данные и определить критерии для группировки линий в коррозионные петли. Документировать эти правила для дальнейшей реализации.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Создание FastAPI эндпоинта для группировки номеров линий",
            "description": "Разработать и внедрить эндпоинт в FastAPI для обработки запросов на группировку номеров линий в соответствии с установленными правилами.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Используя FastAPI, создать эндпоинт, который принимает запросы на группировку номеров линий, применяет разработанные правила и возвращает результаты. Убедиться, что эндпоинт интегрируется с существующей архитектурой и использует текущие технологии проекта.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Сохранение данных о коррозионных петлях в базе данных с соответствующими связями",
            "description": "Обеспечить сохранение информации о коррозионных петлях в базе данных PostgreSQL с установлением необходимых связей между таблицами.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Используя SQLAlchemy и Alembic, создать или обновить модели базы данных для хранения информации о коррозионных петлях. Настроить отношения между таблицами, обеспечивая целостность данных. Реализовать функции для сохранения и извлечения данных в соответствии с установленными правилами.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Создание заглушки для внешнего сервиса группировки",
            "description": "Разработать заглушку, которая будет имитировать поведение внешнего сервиса группировки для тестирования.",
            "status": "pending",
            "dependencies": [],
            "details": "Создать заглушку, которая принимает список line_numbers с координатами, метаданные документа и параметры группировки, и возвращает фиктивные данные о группах, confidence scores и визуальные связи.",
            "testStrategy": "Использовать заглушку для тестирования интеграции и корректности обработки данных."
          },
          {
            "id": 5,
            "title": "Определение требований к API внешнего сервиса группировки",
            "description": "Сформулировать и задокументировать требования к API для внешнего сервиса группировки corrosion loops.",
            "status": "pending",
            "dependencies": [],
            "details": "Определить формат запросов и ответов, необходимые параметры и структуру данных для API внешнего сервиса группировки.",
            "testStrategy": "Проверить документированные требования на полноту и соответствие проектным нуждам."
          },
          {
            "id": 6,
            "title": "Создание mock-данных для тестирования",
            "description": "Разработать набор mock-данных для тестирования интеграции с внешним сервисом группировки.",
            "status": "pending",
            "dependencies": [],
            "details": "Создать mock-данные, которые включают в себя список line_numbers с координатами, метаданные документа и параметры группировки, для использования в тестах.",
            "testStrategy": "Использовать mock-данные для тестирования корректности обработки и передачи данных в рамках интеграции."
          }
        ]
      },
      {
        "id": 6,
        "title": "Develop Frontend for Project and PDF Management",
        "description": "Adapt the existing React-based frontend to enhance project management and PDF functionalities, including multi-file upload and improved drag-and-drop capabilities.",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "Utilize the existing React and TypeScript setup to adapt components for project management. Extend file upload to support multiple PDFs and enhance drag-and-drop functionality. Integrate with new API endpoints for improved data handling.",
        "testStrategy": "Perform comprehensive UI testing to ensure all components render correctly and are responsive. Test multi-file upload and enhanced drag-and-drop functionalities across various browsers. Verify integration with new API endpoints.",
        "subtasks": [
          {
            "id": 1,
            "title": "Создание компонентов React для управления проектами",
            "description": "Разработать компоненты React для отображения и управления проектами, включая создание, редактирование и удаление проектов.",
            "status": "pending",
            "dependencies": [],
            "details": "Использовать существующую архитектуру React и FastAPI для интеграции с бэкендом. Обеспечить взаимодействие с PostgreSQL для хранения данных о проектах.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Реализация функциональности загрузки PDF-файлов",
            "description": "Добавить возможность загрузки PDF-файлов в систему с помощью компонентов React.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Использовать существующий функционал загрузки файлов в FastAPI для обработки загруженных PDF-файлов. Обеспечить сохранение файлов в PostgreSQL и их последующее отображение в интерфейсе.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Интеграция react-pdf-viewer для отображения PDF-файлов",
            "description": "Внедрить библиотеку react-pdf-viewer для отображения загруженных PDF-файлов в интерфейсе.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Использовать существующий функционал рендеринга PDF для обеспечения масштабирования и навигации по документам. Обеспечить совместимость с текущей архитектурой React.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Добавление поддержки drag-and-drop для загрузки файлов",
            "description": "Реализовать возможность загрузки файлов путем перетаскивания (drag-and-drop) в интерфейсе.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Использовать библиотеку react-dropzone для реализации drag-and-drop функциональности. Обеспечить обработку событий перетаскивания и интеграцию с существующей системой загрузки файлов.",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Тестирование и отладка функциональности управления проектами и PDF-файлами",
            "description": "Провести тестирование и отладку всех компонентов, связанных с управлением проектами и PDF-файлами, для обеспечения их корректной работы.",
            "status": "pending",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Использовать существующие инструменты тестирования для проверки функциональности компонентов. Обеспечить совместимость с текущей архитектурой и устранить возможные ошибки.",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Адаптация существующих компонентов для управления проектами",
            "description": "Добавить управление проектами в интерфейс, используя существующую архитектуру React.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Интегрировать новые API эндпоинты для управления проектами и обеспечить их отображение в интерфейсе.",
            "testStrategy": "Проверить корректность отображения и взаимодействия с проектами в интерфейсе."
          },
          {
            "id": 7,
            "title": "Расширение функциональности загрузки файлов для нескольких PDF",
            "description": "Обеспечить возможность загрузки нескольких PDF-файлов одновременно.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Модифицировать существующую функциональность загрузки для поддержки нескольких файлов и интеграции с новыми API эндпоинтами.",
            "testStrategy": "Тестировать загрузку нескольких файлов в различных браузерах для обеспечения стабильности."
          },
          {
            "id": 8,
            "title": "Улучшение drag-and-drop функциональности",
            "description": "Добавить улучшения в существующую drag-and-drop функциональность.",
            "status": "pending",
            "dependencies": [
              4
            ],
            "details": "Интегрировать дополнительные возможности drag-and-drop, используя react-dropzone, и обеспечить их совместимость с текущей системой.",
            "testStrategy": "Проверить работу drag-and-drop в различных сценариях использования."
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Corrosion Loop Visualization",
        "description": "Adapt the existing visualization system to display corrosion loops on PDFs using color coding.",
        "status": "pending",
        "dependencies": [
          6
        ],
        "priority": "medium",
        "details": "Leverage the existing PDF rendering with react-pdf-viewer and Fabric.js for annotations. Utilize the existing rectangle system with coordinates to display corrosion loops. Integrate the color scheme with the database and add loop management to the interface. Use existing APIs to fetch loop data.",
        "testStrategy": "Test loop visualization with sample PDFs to ensure correct color application and interaction. Validate color picker functionality and integration with the database.",
        "subtasks": [
          {
            "id": 1,
            "title": "Создание компонентов React для отображения и редактирования коррозионных петель",
            "description": "Разработать компоненты React, которые будут отображать список коррозионных петель и предоставлять интерфейс для их редактирования.",
            "status": "pending",
            "dependencies": [],
            "details": "Использовать существующую архитектуру React frontend с PDF рендерингом. Создать компоненты, которые отображают список петель и предоставляют возможность их редактирования.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Интеграция компонента выбора цвета для настройки цвета петель",
            "description": "Внедрить компонент выбора цвета в интерфейс редактирования петель, чтобы пользователи могли настраивать цвет каждой петли.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Использовать библиотеку react-color-picker для интеграции компонента выбора цвета в существующие компоненты редактирования петель.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Настройка FastAPI эндпоинтов для получения и обновления данных о коррозионных петлях",
            "description": "Разработать эндпоинты в FastAPI для получения списка петель и обновления их данных, включая информацию о цвете.",
            "status": "pending",
            "dependencies": [],
            "details": "Создать эндпоинты в FastAPI, которые взаимодействуют с PostgreSQL базой данных для получения и обновления информации о коррозионных петлях.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Интеграция данных о цвете петель в PDF рендеринг",
            "description": "Обновить существующий механизм рендеринга PDF, чтобы отображать петли с их соответствующими цветами, полученными из базы данных.",
            "status": "pending",
            "dependencies": [
              3
            ],
            "details": "Модифицировать текущий процесс рендеринга PDF, чтобы учитывать информацию о цвете петель, полученную из FastAPI эндпоинтов, и отображать их в соответствующих цветах на PDF.",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Адаптация существующей системы для отображения corrosion loops",
            "description": "Использовать существующие прямоугольники для отображения corrosion loops на PDF с использованием react-pdf-viewer и Fabric.js.",
            "status": "pending",
            "dependencies": [],
            "details": "Интегрировать существующую систему прямоугольников с координатами для отображения corrosion loops, используя react-pdf-viewer и Fabric.js для аннотаций.",
            "testStrategy": "Проверить корректность отображения corrosion loops на PDF с использованием существующих прямоугольников."
          },
          {
            "id": 6,
            "title": "Интеграция цветовой схемы с базой данных",
            "description": "Обеспечить интеграцию цветовой схемы corrosion loops с базой данных для динамического отображения.",
            "status": "pending",
            "dependencies": [
              3
            ],
            "details": "Настроить систему для получения и применения цветовой схемы corrosion loops из базы данных.",
            "testStrategy": "Проверить корректность применения цветовой схемы из базы данных на PDF."
          },
          {
            "id": 7,
            "title": "Добавление управления loops в интерфейс",
            "description": "Добавить функциональность управления corrosion loops в пользовательский интерфейс.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Разработать интерфейс для управления corrosion loops, включая добавление, удаление и редактирование.",
            "testStrategy": "Убедиться, что управление corrosion loops работает корректно и интуитивно для пользователя."
          }
        ]
      },
      {
        "id": 8,
        "title": "Develop PDF Export with Annotations",
        "description": "Implement functionality to export PDFs with corrosion loop annotations and color coding.",
        "details": "Create a FastAPI endpoint to generate annotated PDFs. Use a library like PyPDF2 to apply annotations and color coding. Ensure exported PDFs maintain visual integrity and annotations are accurate.",
        "testStrategy": "Export annotated PDFs and verify the presence and accuracy of annotations. Test with different PDF viewers to ensure compatibility.",
        "priority": "medium",
        "dependencies": [
          5,
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Разработка FastAPI эндпоинта для генерации аннотированных PDF",
            "description": "Создать новый эндпоинт в существующем FastAPI бэкенде, который будет принимать запросы на генерацию PDF с аннотациями.",
            "dependencies": [],
            "details": "Эндпоинт должен принимать данные о PDF и аннотациях, обрабатывать их и возвращать сгенерированный PDF файл.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Интеграция библиотеки PyPDF2 для добавления аннотаций в PDF",
            "description": "Использовать PyPDF2 для добавления аннотаций и цветового кодирования в PDF файлы.",
            "dependencies": [
              1
            ],
            "details": "Реализовать функции для добавления различных типов аннотаций, таких как текстовые комментарии и выделения, с использованием PyPDF2.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Обеспечение визуальной целостности и точности экспортируемых PDF",
            "description": "Гарантировать, что сгенерированные PDF файлы сохраняют визуальную целостность и точность аннотаций.",
            "dependencies": [
              2
            ],
            "details": "Провести тестирование сгенерированных PDF файлов для проверки корректности отображения аннотаций и общего оформления.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Адаптация существующего React фронтенда для поддержки аннотированных PDF",
            "description": "Обновить текущий React фронтенд с PDF рендерингом для отображения аннотированных PDF файлов.",
            "dependencies": [
              3
            ],
            "details": "Внедрить поддержку отображения аннотаций в PDF viewer с масштабированием, используя существующую архитектуру.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Обновление схемы базы данных PostgreSQL для хранения информации об аннотациях",
            "description": "Модифицировать существующую схему базы данных для хранения данных об аннотациях, связанных с PDF файлами.",
            "dependencies": [
              1
            ],
            "details": "Добавить новые таблицы или поля в существующие таблицы для хранения информации об аннотациях, включая их тип, позицию и связанный PDF файл.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "Create Detailed API Documentation for OCR and Corrosion Loop Grouping",
        "description": "Develop comprehensive API documentation for external OCR and corrosion loop grouping services.",
        "details": "This task involves creating detailed documentation for the APIs that will be used for OCR and corrosion loop grouping. The documentation should include the following components: \n\n1. **API Specification for OCR Service**: Define the input and output data structures, including any necessary authentication details. Specify the endpoints, request methods, and expected responses. Include error handling and status codes.\n\n2. **API Specification for Corrosion Loop Grouping**: Similar to the OCR service, define the input and output data structures, endpoints, request methods, and expected responses. Include details on the algorithms and parameters used for grouping.\n\n3. **Sample Requests and Responses**: Provide examples of API requests and responses in JSON format for both services. These examples should cover typical use cases and edge cases.\n\n4. **Data Schemas**: Define the JSON schemas for the data structures used in both APIs, ensuring clarity and completeness.\n\n5. **Performance and Reliability Requirements**: Outline the expected performance metrics and reliability standards for both services, including response times and uptime requirements.\n\n6. **Integration Guide for External Teams**: Develop a comprehensive guide to assist external teams in integrating these APIs into their systems. This should include setup instructions, common pitfalls, and troubleshooting tips.",
        "testStrategy": "To verify the documentation, perform the following steps:\n\n1. **Review by Technical Writers**: Have the documentation reviewed by technical writers to ensure clarity and completeness.\n\n2. **Peer Review by Developers**: Conduct a peer review with developers who will use these APIs to ensure the documentation meets their needs.\n\n3. **Mock Implementation**: Use the documentation to implement a mock client for both APIs, ensuring that all specified endpoints and data structures are correctly documented.\n\n4. **Feedback Loop**: Gather feedback from initial users of the documentation and make necessary adjustments to improve clarity and usability.",
        "status": "pending",
        "dependencies": [
          4,
          5
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Develop API Specification for OCR Service",
            "description": "Create a comprehensive API specification for the OCR service, detailing input/output data structures, authentication methods, endpoints, request methods, expected responses, error handling, and status codes.",
            "dependencies": [],
            "details": "This subtask involves defining the API's structure and behavior, including data formats, authentication requirements, and error responses, to ensure clear communication and integration with external systems.",
            "status": "pending",
            "testStrategy": "Validate the API specification by creating mock requests and responses to ensure all defined behaviors and structures are correctly implemented."
          },
          {
            "id": 2,
            "title": "Develop API Specification for Corrosion Loop Grouping Service",
            "description": "Create a comprehensive API specification for the corrosion loop grouping service, detailing input/output data structures, authentication methods, endpoints, request methods, expected responses, error handling, and status codes.",
            "dependencies": [],
            "details": "This subtask involves defining the API's structure and behavior, including data formats, authentication requirements, and error responses, to ensure clear communication and integration with external systems.",
            "status": "pending",
            "testStrategy": "Validate the API specification by creating mock requests and responses to ensure all defined behaviors and structures are correctly implemented."
          },
          {
            "id": 3,
            "title": "Provide Sample Requests and Responses",
            "description": "Develop example API requests and responses in JSON format for both the OCR and corrosion loop grouping services, covering typical use cases and edge cases.",
            "dependencies": [
              1,
              2
            ],
            "details": "This subtask involves creating practical examples to illustrate how the APIs should be used, aiding developers in understanding and implementing the services effectively.",
            "status": "pending",
            "testStrategy": "Review the sample requests and responses to ensure they accurately represent the API specifications and cover a range of scenarios."
          },
          {
            "id": 4,
            "title": "Define Data Schemas",
            "description": "Establish clear and complete JSON schemas for the data structures used in both APIs to ensure consistency and clarity.",
            "dependencies": [
              1,
              2
            ],
            "details": "This subtask involves specifying the structure, data types, and validation rules for the data exchanged through the APIs, facilitating accurate data handling and integration.",
            "status": "pending",
            "testStrategy": "Validate the data schemas by testing them against sample data to ensure they enforce the correct structure and constraints."
          },
          {
            "id": 5,
            "title": "Outline Performance and Reliability Requirements",
            "description": "Specify the expected performance metrics and reliability standards for both services, including response times and uptime requirements.",
            "dependencies": [],
            "details": "This subtask involves defining measurable performance and reliability criteria to ensure the services meet operational expectations and provide a satisfactory user experience.",
            "status": "pending",
            "testStrategy": "Develop performance tests to measure response times and reliability tests to monitor uptime, ensuring the services meet the defined standards."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-23T17:53:34.761Z",
      "updated": "2025-06-23T18:14:08.185Z",
      "description": "Tasks for corrosion-loops context"
    }
  },
  "corrosion-loops": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository",
        "description": "Initialize the project repository with the necessary structure and dependencies.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "details": "The project repository is already initialized with FastAPI backend, React frontend with TypeScript, PostgreSQL database, and a PDF viewer with scaling. ESLint and Prettier are configured. The remaining tasks include integrating Google Cloud Vision API for OCR in the backend, expanding the database schema for projects and corrosion loops, creating directories for storing PDFs by project, and setting up stubs for external APIs.",
        "testStrategy": "Verify the integration of Google Cloud Vision API by checking its functionality in the backend. Ensure the database schema is expanded correctly, directories for PDFs are created and accessible, and stubs for external APIs are functioning as expected.",
        "subtasks": [
          {
            "id": 1,
            "title": "Инициализация Git-репозитория и настройка структуры проекта",
            "description": "Создать новый Git-репозиторий и организовать структуру проекта, включая каталоги для фронтенда, бэкенда и общих ресурсов.",
            "status": "done",
            "dependencies": [],
            "details": "Создайте новый репозиторий с помощью команды `git init`. Затем создайте основные каталоги: `frontend/` для React-приложения, `backend/` для FastAPI-сервера и `shared/` для общих ресурсов. Убедитесь, что структура проекта соответствует существующей архитектуре.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Интеграция Google Cloud Vision API в FastAPI-бэкенд",
            "description": "Добавить Google Cloud Vision API клиент в FastAPI-бэкенд для обработки изображений.",
            "status": "pending",
            "dependencies": [],
            "details": "Добавьте Google Cloud Vision API клиент в файл `requirements.txt` в каталоге `backend/`. Настройте аутентификацию с помощью Service Account. Убедитесь, что API интегрирован в существующие маршруты FastAPI для обработки изображений.\n<info added on 2025-06-24T06:34:39.714Z>\nНастройте аутентификацию Service Account для Google Cloud Vision API и протестируйте установку.\n</info added on 2025-06-24T06:34:39.714Z>",
            "testStrategy": "Проверьте установку Google Cloud Vision API клиента и его функциональность в существующих маршрутах FastAPI."
          },
          {
            "id": 3,
            "title": "Расширение схемы базы данных для проектов и corrosion loops",
            "description": "Обновить схему базы данных PostgreSQL для поддержки новых сущностей проектов и corrosion loops.",
            "status": "done",
            "dependencies": [],
            "details": "Добавьте новые таблицы и поля в существующую схему базы данных PostgreSQL для поддержки сущностей проектов и corrosion loops. Убедитесь, что изменения совместимы с текущей архитектурой базы данных.",
            "testStrategy": "Проверьте, что новые таблицы и поля корректно созданы и доступны для операций CRUD."
          },
          {
            "id": 4,
            "title": "Создание каталогов для хранения PDF по проектам",
            "description": "Создать структуру каталогов для хранения PDF-файлов, организованных по проектам.",
            "status": "pending",
            "dependencies": [],
            "details": "В корневом каталоге проекта создайте структуру каталогов для хранения PDF-файлов, организованных по проектам. Убедитесь, что структура поддерживает легкий доступ и управление файлами.\n<info added on 2025-06-24T06:35:33.268Z>\nЛогика будет в backend/main.py для создания каталогов проектов. Путь: ./uploads/projects/{project_id}/pdfs/. Поддержка легкого доступа и управления файлами.\n\nСоздан .cursor/environment.json с полной конфигурацией, включая все зависимости (Python и Node.js), команды установки, переменные окружения и информацию об архитектуре.\n\nСоздан env.example с примерами переменных окружения.\n\nОбновлены package.json файлы с дополнительными зависимостями.\n</info added on 2025-06-24T06:35:33.268Z>",
            "testStrategy": "Проверьте, что каталоги созданы и доступны для записи и чтения PDF-файлов."
          },
          {
            "id": 5,
            "title": "Создание заглушек для внешних API",
            "description": "Создать заглушки для интеграции с внешними API, включая OCR и группировку loops.",
            "status": "pending",
            "dependencies": [],
            "details": "Определите требования к интерфейсам внешних сервисов и создайте заглушки для их интеграции. Убедитесь, что заглушки позволяют тестировать взаимодействие с внешними API без реальных вызовов.",
            "testStrategy": "Проверьте, что заглушки корректно имитируют взаимодействие с внешними API и позволяют тестировать функциональность системы."
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Project Management Backend",
        "description": "Expand the existing backend functionality to include project management features.",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "Extend the current FastAPI setup with SQLAlchemy and PostgreSQL to include new models and endpoints. Add models for projects and corrosion_loops in models.py. Expand Pydantic schemas to accommodate new models. Implement additional endpoints for managing projects, ensuring they are RESTful and follow best practices for API design.",
        "testStrategy": "Test each new API endpoint using Postman or a similar tool to ensure correct functionality. Validate database operations through unit tests using pytest.",
        "subtasks": [
          {
            "id": 1,
            "title": "Разработка моделей данных и схем с использованием SQLAlchemy и Pydantic",
            "description": "Создать модели данных для управления проектами с помощью SQLAlchemy и соответствующие схемы Pydantic для валидации данных.",
            "status": "pending",
            "dependencies": [],
            "details": "Определить модели данных, такие как Project, Task и User, используя SQLAlchemy. Создать соответствующие схемы Pydantic для валидации входных и выходных данных API.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Реализация CRUD-эндпоинтов в FastAPI для управления проектами",
            "description": "Создать эндпоинты в FastAPI для операций создания, чтения, обновления и удаления проектов, задач и пользователей.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Используя созданные модели и схемы, разработать эндпоинты для CRUD-операций, обеспечивая соответствие принципам RESTful API.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Интеграция FastAPI с PostgreSQL через SQLAlchemy",
            "description": "Настроить подключение FastAPI к базе данных PostgreSQL с использованием SQLAlchemy.",
            "status": "pending",
            "dependencies": [
              1,
              2
            ],
            "details": "Настроить соединение с PostgreSQL, используя SQLAlchemy, и обеспечить взаимодействие с базой данных через созданные модели.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Разработка модульных тестов для эндпоинтов FastAPI с использованием pytest",
            "description": "Написать модульные тесты для всех эндпоинтов FastAPI, обеспечивая их корректную работу.",
            "status": "pending",
            "dependencies": [
              2,
              3
            ],
            "details": "Используя pytest, разработать тесты для проверки функциональности каждого эндпоинта, включая позитивные и негативные сценарии.",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Добавление модели projects и corrosion_loops в models.py",
            "description": "Расширить существующие модели, добавив новые модели для управления проектами и коррозионными петлями.",
            "status": "pending",
            "dependencies": [],
            "details": "Добавить модели projects и corrosion_loops в файл models.py, используя SQLAlchemy.",
            "testStrategy": "Проверить корректность создания моделей и их взаимодействие с базой данных через тесты."
          },
          {
            "id": 6,
            "title": "Расширение схем Pydantic для новых моделей",
            "description": "Обновить схемы Pydantic для поддержки новых моделей данных.",
            "status": "pending",
            "dependencies": [
              5
            ],
            "details": "Создать и обновить схемы Pydantic для моделей projects и corrosion_loops для валидации данных.",
            "testStrategy": "Проверить валидацию данных через тесты, убедившись в корректной работе схем."
          },
          {
            "id": 7,
            "title": "Добавление новых эндпоинтов для управления проектами",
            "description": "Создать новые эндпоинты в FastAPI для управления проектами, включая создание, обновление и удаление.",
            "status": "pending",
            "dependencies": [
              5,
              6
            ],
            "details": "Разработать новые эндпоинты для управления проектами, следуя принципам RESTful API.",
            "testStrategy": "Тестировать новые эндпоинты с использованием Postman или аналогичного инструмента для проверки их функциональности."
          }
        ]
      },
      {
        "id": 3,
        "title": "Develop PDF Upload and Storage",
        "description": "Implement functionality for uploading and storing PDF files associated with projects.",
        "details": "Create a FastAPI endpoint for uploading PDF files. Use SQLAlchemy to store file metadata in the database. Implement file storage using a secure directory structure. Ensure files are linked to projects via foreign keys.",
        "testStrategy": "Upload sample PDFs and verify their storage and metadata entry in the database. Check file retrieval and deletion operations.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Создание FastAPI эндпоинта для загрузки PDF-файлов",
            "description": "Разработать эндпоинт в FastAPI для приема и обработки загрузки PDF-файлов с фронтенда.",
            "dependencies": [],
            "details": "Использовать существующий FastAPI бэкенд для создания эндпоинта, принимающего файлы с помощью UploadFile. Обеспечить обработку файлов формата PDF и валидацию их типа.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Реализация хранения метаданных PDF-файлов с использованием SQLAlchemy",
            "description": "Настроить модель данных в SQLAlchemy для хранения метаданных загруженных PDF-файлов в базе данных PostgreSQL.",
            "dependencies": [
              1
            ],
            "details": "Создать модель SQLAlchemy с полями для хранения информации о файле, такой как имя файла, размер, дата загрузки и путь к файлу. Интегрировать эту модель с существующей базой данных PostgreSQL.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Настройка безопасного хранения PDF-файлов",
            "description": "Организовать безопасное хранение загруженных PDF-файлов на сервере или в облачном хранилище.",
            "dependencies": [
              1,
              2
            ],
            "details": "Использовать существующую инфраструктуру для хранения файлов, обеспечивая контроль доступа и защиту данных. Рассмотреть использование локального хранилища или облачных сервисов, совместимых с текущей архитектурой.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Integrate EasyOCR for Line Number Recognition",
        "description": "Set up OCR functionality using Google Cloud Vision API to recognize line numbers in uploaded PDFs.",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "medium",
        "details": "Install and configure Google Cloud Vision API in the backend. Develop a FastAPI endpoint to process PDFs and extract line numbers using the Vision API. Implement error handling and logging for OCR operations. Set up authentication through a Service Account and create a stub for the OCR service with a clear API interface. Define input/output requirements for the OCR API for the external team.\n<info added on 2025-06-23T18:13:19.839Z>\nIntegrate Google Cloud Vision API for Line Number Recognition\n</info added on 2025-06-23T18:13:19.839Z>",
        "testStrategy": "Test OCR functionality with various PDF samples to ensure accurate line number recognition using Google Cloud Vision API. Validate error handling by simulating OCR failures. Ensure that the authentication and API interface function correctly.",
        "subtasks": [
          {
            "id": 1,
            "title": "Установка и настройка EasyOCR",
            "description": "Установить библиотеку EasyOCR и настроить её для распознавания номеров строк в PDF-документах.",
            "status": "pending",
            "dependencies": [],
            "details": "Установить EasyOCR с помощью pip и убедиться, что все необходимые зависимости установлены. Провести тестирование распознавания текста на образцах PDF, чтобы убедиться в корректной работе.\n<info added on 2025-06-23T18:13:34.014Z>\nУстановить google-cloud-vision с помощью pip. Настроить Service Account для аутентификации. Настроить GOOGLE_APPLICATION_CREDENTIALS. Провести тестирование распознавания текста на образцах PDF.\n</info added on 2025-06-23T18:13:34.014Z>",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Разработка FastAPI эндпоинта для обработки PDF",
            "description": "Создать эндпоинт в FastAPI для загрузки PDF-файлов и обработки их с использованием EasyOCR.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Разработать эндпоинт, который принимает PDF-файл, извлекает его содержимое и использует EasyOCR для распознавания номеров строк. Убедиться, что эндпоинт интегрирован с существующей архитектурой FastAPI и взаимодействует с PostgreSQL для хранения результатов.\n<info added on 2025-06-23T18:13:48.874Z>\nСоздать эндпоинт в FastAPI для загрузки PDF-файлов и обработки их с использованием Google Cloud Vision API. Разработать эндпоинт, который принимает PDF-файл, извлекает его содержимое и использует Google Cloud Vision API для распознавания номеров строк. Убедиться, что эндпоинт интегрирован с существующей архитектурой FastAPI и взаимодействует с PostgreSQL для хранения результатов.\n</info added on 2025-06-23T18:13:48.874Z>",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Реализация обработки ошибок в FastAPI",
            "description": "Внедрить обработку ошибок в FastAPI для обеспечения надежности при обработке PDF-файлов.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Создать глобальные обработчики исключений для различных типов ошибок, включая ошибки валидации, ошибки базы данных и неожиданные исключения. Убедиться, что обработчики возвращают информативные сообщения об ошибках и соответствующие коды состояния HTTP. Например, можно создать обработчик для RequestValidationError, который возвращает статус 422 и подробности ошибки.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Настройка механизмов логирования в FastAPI",
            "description": "Настроить логирование в FastAPI для мониторинга и отладки процесса обработки PDF-файлов.",
            "status": "pending",
            "dependencies": [
              3
            ],
            "details": "Использовать встроенный модуль logging для настройки логирования. Определить уровни логирования (INFO, ERROR и т.д.) и форматы сообщений. Убедиться, что логи записываются в файл и/или выводятся в консоль. Например, можно настроить логирование с помощью logging.basicConfig(level=logging.INFO) и создать логгер с помощью logging.getLogger(__name__).",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Настройка Google Cloud Vision API",
            "description": "Настроить Google Cloud Vision API для распознавания номеров строк в PDF-документах.",
            "status": "pending",
            "dependencies": [],
            "details": "Настроить аутентификацию через Service Account и интегрировать Google Cloud Vision API в проект. Убедиться, что все необходимые разрешения и конфигурации установлены.",
            "testStrategy": "Проверить, что аутентификация и доступ к API работают корректно."
          },
          {
            "id": 6,
            "title": "Создание заглушки для OCR сервиса",
            "description": "Создать заглушку для OCR сервиса с четким API интерфейсом.",
            "status": "pending",
            "dependencies": [
              5
            ],
            "details": "Определить и реализовать API интерфейс для OCR сервиса, который принимает PDF файл (base64 или URL) и параметры распознавания (языки, типы документов).",
            "testStrategy": "Убедиться, что заглушка корректно принимает входные данные и возвращает ожидаемый формат данных."
          },
          {
            "id": 7,
            "title": "Определение требований к входным/выходным данным OCR API",
            "description": "Определить требования к входным и выходным данным для OCR API, которые будут использоваться внешней командой.",
            "status": "pending",
            "dependencies": [
              6
            ],
            "details": "Документировать формат входных данных (PDF файл, параметры распознавания) и выходных данных (распознанный текст с координатами, confidence scores, метаданные о качестве распознавания).",
            "testStrategy": "Проверить, что документация соответствует требованиям и понятна для внешней команды."
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Corrosion Loop Grouping Logic",
        "description": "Develop logic for integrating with an external service for grouping line numbers into corrosion loops based on predefined rules.",
        "status": "pending",
        "dependencies": [
          4
        ],
        "priority": "medium",
        "details": "Create a stub for the external grouping service. Define clear API requirements for the loop grouping service. Create mock data for testing. The external service should accept a list of line_numbers with coordinates, document metadata (sizes, type), and grouping parameters (algorithm, settings). It should return groups of line_numbers (corrosion loops), confidence scores for each group, visual connections between group elements, and recommendations for group adjustments.",
        "testStrategy": "Test the integration with the external service using mock data to ensure correct loop formation and data exchange. Validate the API requirements and the handling of returned data, including confidence scores and visual connections.",
        "subtasks": [
          {
            "id": 1,
            "title": "Разработка правил группировки для коррозионных петель",
            "description": "Определить и документировать правила группировки линий в коррозионные петли на основе существующих данных и требований.",
            "status": "pending",
            "dependencies": [],
            "details": "Анализировать текущие данные и определить критерии для группировки линий в коррозионные петли. Документировать эти правила для дальнейшей реализации.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Создание FastAPI эндпоинта для группировки номеров линий",
            "description": "Разработать и внедрить эндпоинт в FastAPI для обработки запросов на группировку номеров линий в соответствии с установленными правилами.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Используя FastAPI, создать эндпоинт, который принимает запросы на группировку номеров линий, применяет разработанные правила и возвращает результаты. Убедиться, что эндпоинт интегрируется с существующей архитектурой и использует текущие технологии проекта.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Сохранение данных о коррозионных петлях в базе данных с соответствующими связями",
            "description": "Обеспечить сохранение информации о коррозионных петлях в базе данных PostgreSQL с установлением необходимых связей между таблицами.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Используя SQLAlchemy и Alembic, создать или обновить модели базы данных для хранения информации о коррозионных петлях. Настроить отношения между таблицами, обеспечивая целостность данных. Реализовать функции для сохранения и извлечения данных в соответствии с установленными правилами.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Создание заглушки для внешнего сервиса группировки",
            "description": "Разработать заглушку, которая будет имитировать поведение внешнего сервиса группировки для тестирования.",
            "status": "pending",
            "dependencies": [],
            "details": "Создать заглушку, которая принимает список line_numbers с координатами, метаданные документа и параметры группировки, и возвращает фиктивные данные о группах, confidence scores и визуальные связи.",
            "testStrategy": "Использовать заглушку для тестирования интеграции и корректности обработки данных."
          },
          {
            "id": 5,
            "title": "Определение требований к API внешнего сервиса группировки",
            "description": "Сформулировать и задокументировать требования к API для внешнего сервиса группировки corrosion loops.",
            "status": "pending",
            "dependencies": [],
            "details": "Определить формат запросов и ответов, необходимые параметры и структуру данных для API внешнего сервиса группировки.",
            "testStrategy": "Проверить документированные требования на полноту и соответствие проектным нуждам."
          },
          {
            "id": 6,
            "title": "Создание mock-данных для тестирования",
            "description": "Разработать набор mock-данных для тестирования интеграции с внешним сервисом группировки.",
            "status": "pending",
            "dependencies": [],
            "details": "Создать mock-данные, которые включают в себя список line_numbers с координатами, метаданные документа и параметры группировки, для использования в тестах.",
            "testStrategy": "Использовать mock-данные для тестирования корректности обработки и передачи данных в рамках интеграции."
          }
        ]
      },
      {
        "id": 6,
        "title": "Develop Frontend for Project and PDF Management",
        "description": "Adapt the existing React-based frontend to enhance project management and PDF functionalities, including multi-file upload and improved drag-and-drop capabilities.",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "Utilize the existing React and TypeScript setup to adapt components for project management. Extend file upload to support multiple PDFs and enhance drag-and-drop functionality. Integrate with new API endpoints for improved data handling.",
        "testStrategy": "Perform comprehensive UI testing to ensure all components render correctly and are responsive. Test multi-file upload and enhanced drag-and-drop functionalities across various browsers. Verify integration with new API endpoints.",
        "subtasks": [
          {
            "id": 1,
            "title": "Создание компонентов React для управления проектами",
            "description": "Разработать компоненты React для отображения и управления проектами, включая создание, редактирование и удаление проектов.",
            "status": "pending",
            "dependencies": [],
            "details": "Использовать существующую архитектуру React и FastAPI для интеграции с бэкендом. Обеспечить взаимодействие с PostgreSQL для хранения данных о проектах.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Реализация функциональности загрузки PDF-файлов",
            "description": "Добавить возможность загрузки PDF-файлов в систему с помощью компонентов React.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Использовать существующий функционал загрузки файлов в FastAPI для обработки загруженных PDF-файлов. Обеспечить сохранение файлов в PostgreSQL и их последующее отображение в интерфейсе.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Интеграция react-pdf-viewer для отображения PDF-файлов",
            "description": "Внедрить библиотеку react-pdf-viewer для отображения загруженных PDF-файлов в интерфейсе.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Использовать существующий функционал рендеринга PDF для обеспечения масштабирования и навигации по документам. Обеспечить совместимость с текущей архитектурой React.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Добавление поддержки drag-and-drop для загрузки файлов",
            "description": "Реализовать возможность загрузки файлов путем перетаскивания (drag-and-drop) в интерфейсе.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Использовать библиотеку react-dropzone для реализации drag-and-drop функциональности. Обеспечить обработку событий перетаскивания и интеграцию с существующей системой загрузки файлов.",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Тестирование и отладка функциональности управления проектами и PDF-файлами",
            "description": "Провести тестирование и отладку всех компонентов, связанных с управлением проектами и PDF-файлами, для обеспечения их корректной работы.",
            "status": "pending",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Использовать существующие инструменты тестирования для проверки функциональности компонентов. Обеспечить совместимость с текущей архитектурой и устранить возможные ошибки.",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Адаптация существующих компонентов для управления проектами",
            "description": "Добавить управление проектами в интерфейс, используя существующую архитектуру React.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Интегрировать новые API эндпоинты для управления проектами и обеспечить их отображение в интерфейсе.",
            "testStrategy": "Проверить корректность отображения и взаимодействия с проектами в интерфейсе."
          },
          {
            "id": 7,
            "title": "Расширение функциональности загрузки файлов для нескольких PDF",
            "description": "Обеспечить возможность загрузки нескольких PDF-файлов одновременно.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Модифицировать существующую функциональность загрузки для поддержки нескольких файлов и интеграции с новыми API эндпоинтами.",
            "testStrategy": "Тестировать загрузку нескольких файлов в различных браузерах для обеспечения стабильности."
          },
          {
            "id": 8,
            "title": "Улучшение drag-and-drop функциональности",
            "description": "Добавить улучшения в существующую drag-and-drop функциональность.",
            "status": "pending",
            "dependencies": [
              4
            ],
            "details": "Интегрировать дополнительные возможности drag-and-drop, используя react-dropzone, и обеспечить их совместимость с текущей системой.",
            "testStrategy": "Проверить работу drag-and-drop в различных сценариях использования."
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Corrosion Loop Visualization",
        "description": "Adapt the existing visualization system to display corrosion loops on PDFs using color coding.",
        "status": "pending",
        "dependencies": [
          6
        ],
        "priority": "medium",
        "details": "Leverage the existing PDF rendering with react-pdf-viewer and Fabric.js for annotations. Utilize the existing rectangle system with coordinates to display corrosion loops. Integrate the color scheme with the database and add loop management to the interface. Use existing APIs to fetch loop data.",
        "testStrategy": "Test loop visualization with sample PDFs to ensure correct color application and interaction. Validate color picker functionality and integration with the database.",
        "subtasks": [
          {
            "id": 1,
            "title": "Создание компонентов React для отображения и редактирования коррозионных петель",
            "description": "Разработать компоненты React, которые будут отображать список коррозионных петель и предоставлять интерфейс для их редактирования.",
            "status": "pending",
            "dependencies": [],
            "details": "Использовать существующую архитектуру React frontend с PDF рендерингом. Создать компоненты, которые отображают список петель и предоставляют возможность их редактирования.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Интеграция компонента выбора цвета для настройки цвета петель",
            "description": "Внедрить компонент выбора цвета в интерфейс редактирования петель, чтобы пользователи могли настраивать цвет каждой петли.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Использовать библиотеку react-color-picker для интеграции компонента выбора цвета в существующие компоненты редактирования петель.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Настройка FastAPI эндпоинтов для получения и обновления данных о коррозионных петлях",
            "description": "Разработать эндпоинты в FastAPI для получения списка петель и обновления их данных, включая информацию о цвете.",
            "status": "pending",
            "dependencies": [],
            "details": "Создать эндпоинты в FastAPI, которые взаимодействуют с PostgreSQL базой данных для получения и обновления информации о коррозионных петлях.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Интеграция данных о цвете петель в PDF рендеринг",
            "description": "Обновить существующий механизм рендеринга PDF, чтобы отображать петли с их соответствующими цветами, полученными из базы данных.",
            "status": "pending",
            "dependencies": [
              3
            ],
            "details": "Модифицировать текущий процесс рендеринга PDF, чтобы учитывать информацию о цвете петель, полученную из FastAPI эндпоинтов, и отображать их в соответствующих цветах на PDF.",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Адаптация существующей системы для отображения corrosion loops",
            "description": "Использовать существующие прямоугольники для отображения corrosion loops на PDF с использованием react-pdf-viewer и Fabric.js.",
            "status": "pending",
            "dependencies": [],
            "details": "Интегрировать существующую систему прямоугольников с координатами для отображения corrosion loops, используя react-pdf-viewer и Fabric.js для аннотаций.",
            "testStrategy": "Проверить корректность отображения corrosion loops на PDF с использованием существующих прямоугольников."
          },
          {
            "id": 6,
            "title": "Интеграция цветовой схемы с базой данных",
            "description": "Обеспечить интеграцию цветовой схемы corrosion loops с базой данных для динамического отображения.",
            "status": "pending",
            "dependencies": [
              3
            ],
            "details": "Настроить систему для получения и применения цветовой схемы corrosion loops из базы данных.",
            "testStrategy": "Проверить корректность применения цветовой схемы из базы данных на PDF."
          },
          {
            "id": 7,
            "title": "Добавление управления loops в интерфейс",
            "description": "Добавить функциональность управления corrosion loops в пользовательский интерфейс.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Разработать интерфейс для управления corrosion loops, включая добавление, удаление и редактирование.",
            "testStrategy": "Убедиться, что управление corrosion loops работает корректно и интуитивно для пользователя."
          }
        ]
      },
      {
        "id": 8,
        "title": "Develop PDF Export with Annotations",
        "description": "Implement functionality to export PDFs with corrosion loop annotations and color coding.",
        "details": "Create a FastAPI endpoint to generate annotated PDFs. Use a library like PyPDF2 to apply annotations and color coding. Ensure exported PDFs maintain visual integrity and annotations are accurate.",
        "testStrategy": "Export annotated PDFs and verify the presence and accuracy of annotations. Test with different PDF viewers to ensure compatibility.",
        "priority": "medium",
        "dependencies": [
          5,
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Разработка FastAPI эндпоинта для генерации аннотированных PDF",
            "description": "Создать новый эндпоинт в существующем FastAPI бэкенде, который будет принимать запросы на генерацию PDF с аннотациями.",
            "dependencies": [],
            "details": "Эндпоинт должен принимать данные о PDF и аннотациях, обрабатывать их и возвращать сгенерированный PDF файл.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Интеграция библиотеки PyPDF2 для добавления аннотаций в PDF",
            "description": "Использовать PyPDF2 для добавления аннотаций и цветового кодирования в PDF файлы.",
            "dependencies": [
              1
            ],
            "details": "Реализовать функции для добавления различных типов аннотаций, таких как текстовые комментарии и выделения, с использованием PyPDF2.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Обеспечение визуальной целостности и точности экспортируемых PDF",
            "description": "Гарантировать, что сгенерированные PDF файлы сохраняют визуальную целостность и точность аннотаций.",
            "dependencies": [
              2
            ],
            "details": "Провести тестирование сгенерированных PDF файлов для проверки корректности отображения аннотаций и общего оформления.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Адаптация существующего React фронтенда для поддержки аннотированных PDF",
            "description": "Обновить текущий React фронтенд с PDF рендерингом для отображения аннотированных PDF файлов.",
            "dependencies": [
              3
            ],
            "details": "Внедрить поддержку отображения аннотаций в PDF viewer с масштабированием, используя существующую архитектуру.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Обновление схемы базы данных PostgreSQL для хранения информации об аннотациях",
            "description": "Модифицировать существующую схему базы данных для хранения данных об аннотациях, связанных с PDF файлами.",
            "dependencies": [
              1
            ],
            "details": "Добавить новые таблицы или поля в существующие таблицы для хранения информации об аннотациях, включая их тип, позицию и связанный PDF файл.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "Create Detailed API Documentation for OCR and Corrosion Loop Grouping",
        "description": "Develop comprehensive API documentation for external OCR and corrosion loop grouping services.",
        "details": "This task involves creating detailed documentation for the APIs that will be used for OCR and corrosion loop grouping. The documentation should include the following components: \n\n1. **API Specification for OCR Service**: Define the input and output data structures, including any necessary authentication details. Specify the endpoints, request methods, and expected responses. Include error handling and status codes.\n\n2. **API Specification for Corrosion Loop Grouping**: Similar to the OCR service, define the input and output data structures, endpoints, request methods, and expected responses. Include details on the algorithms and parameters used for grouping.\n\n3. **Sample Requests and Responses**: Provide examples of API requests and responses in JSON format for both services. These examples should cover typical use cases and edge cases.\n\n4. **Data Schemas**: Define the JSON schemas for the data structures used in both APIs, ensuring clarity and completeness.\n\n5. **Performance and Reliability Requirements**: Outline the expected performance metrics and reliability standards for both services, including response times and uptime requirements.\n\n6. **Integration Guide for External Teams**: Develop a comprehensive guide to assist external teams in integrating these APIs into their systems. This should include setup instructions, common pitfalls, and troubleshooting tips.",
        "testStrategy": "To verify the documentation, perform the following steps:\n\n1. **Review by Technical Writers**: Have the documentation reviewed by technical writers to ensure clarity and completeness.\n\n2. **Peer Review by Developers**: Conduct a peer review with developers who will use these APIs to ensure the documentation meets their needs.\n\n3. **Mock Implementation**: Use the documentation to implement a mock client for both APIs, ensuring that all specified endpoints and data structures are correctly documented.\n\n4. **Feedback Loop**: Gather feedback from initial users of the documentation and make necessary adjustments to improve clarity and usability.",
        "status": "pending",
        "dependencies": [
          4,
          5
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Develop API Specification for OCR Service",
            "description": "Create a comprehensive API specification for the OCR service, detailing input/output data structures, authentication methods, endpoints, request methods, expected responses, error handling, and status codes.",
            "dependencies": [],
            "details": "This subtask involves defining the API's structure and behavior, including data formats, authentication requirements, and error responses, to ensure clear communication and integration with external systems.",
            "status": "pending",
            "testStrategy": "Validate the API specification by creating mock requests and responses to ensure all defined behaviors and structures are correctly implemented."
          },
          {
            "id": 2,
            "title": "Develop API Specification for Corrosion Loop Grouping Service",
            "description": "Create a comprehensive API specification for the corrosion loop grouping service, detailing input/output data structures, authentication methods, endpoints, request methods, expected responses, error handling, and status codes.",
            "dependencies": [],
            "details": "This subtask involves defining the API's structure and behavior, including data formats, authentication requirements, and error responses, to ensure clear communication and integration with external systems.",
            "status": "pending",
            "testStrategy": "Validate the API specification by creating mock requests and responses to ensure all defined behaviors and structures are correctly implemented."
          },
          {
            "id": 3,
            "title": "Provide Sample Requests and Responses",
            "description": "Develop example API requests and responses in JSON format for both the OCR and corrosion loop grouping services, covering typical use cases and edge cases.",
            "dependencies": [
              1,
              2
            ],
            "details": "This subtask involves creating practical examples to illustrate how the APIs should be used, aiding developers in understanding and implementing the services effectively.",
            "status": "pending",
            "testStrategy": "Review the sample requests and responses to ensure they accurately represent the API specifications and cover a range of scenarios."
          },
          {
            "id": 4,
            "title": "Define Data Schemas",
            "description": "Establish clear and complete JSON schemas for the data structures used in both APIs to ensure consistency and clarity.",
            "dependencies": [
              1,
              2
            ],
            "details": "This subtask involves specifying the structure, data types, and validation rules for the data exchanged through the APIs, facilitating accurate data handling and integration.",
            "status": "pending",
            "testStrategy": "Validate the data schemas by testing them against sample data to ensure they enforce the correct structure and constraints."
          },
          {
            "id": 5,
            "title": "Outline Performance and Reliability Requirements",
            "description": "Specify the expected performance metrics and reliability standards for both services, including response times and uptime requirements.",
            "dependencies": [],
            "details": "This subtask involves defining measurable performance and reliability criteria to ensure the services meet operational expectations and provide a satisfactory user experience.",
            "status": "pending",
            "testStrategy": "Develop performance tests to measure response times and reliability tests to monitor uptime, ensuring the services meet the defined standards."
          }
        ]
      },
      {
        "id": 10,
        "title": "Implement Basic Unit Tests for Backend",
        "description": "Create and integrate basic unit tests for backend models, CRUD operations, and Pydantic schemas using pytest and in-memory SQLite.",
        "details": "Develop unit tests for the backend components focusing on data models (Document, OcrResult, LineNumber), CRUD operations, and Pydantic schemas (DocumentCreate, OcrResultCreate, LineNumberCreate). Use pytest as the testing framework and configure an in-memory SQLite database for testing purposes. Ensure that all tests are placed in the 'backend/tests/' directory. The goal is to establish a foundational test suite that ensures the reliability of these components and facilitates further development, particularly in the area of corrosion loops. Consider edge cases and error handling in your tests to ensure robustness.",
        "testStrategy": "1. Set up pytest in the project if not already configured.\n2. Create test files in the 'backend/tests/' directory for each component: models, CRUD operations, and Pydantic schemas.\n3. Write tests for each data model to verify field integrity and relationships.\n4. Implement CRUD operation tests to ensure all create, read, update, and delete functionalities work as expected.\n5. Validate Pydantic schemas by testing data validation and serialization.\n6. Run all tests using pytest and ensure they pass without errors.\n7. Review test coverage reports to ensure adequate coverage of all critical paths.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-23T17:53:34.761Z",
      "updated": "2025-06-24T07:10:05.236Z",
      "description": "Tasks for corrosion-loops context"
    }
  }
}