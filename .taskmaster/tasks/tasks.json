{
  "master": {
    "tasks": [
      {
        "id": 3,
        "title": "Setup Project Environment",
        "description": "Initialize the project with necessary libraries and tools for development.",
        "details": "Set up a new React project using Create React App. Install necessary libraries including react-pdf-viewer, pdf.js, fabric.js, FastAPI, and PostgreSQL. Configure ESLint and Prettier for code quality.",
        "testStrategy": "Verify that all libraries are correctly installed and the project builds successfully.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement File Watcher Service",
        "description": "Develop a Node.js service to monitor the /data directory for new PDF and JSON files.",
        "details": "Use Node.js fs module to watch the /data directory. On detecting new files, update the documents table in PostgreSQL with file metadata.",
        "testStrategy": "Test by adding new files to the /data directory and verify that entries are created in the database.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Parse JSON for Bounding Boxes",
        "description": "Create a FastAPI endpoint to parse JSON files and extract bounding box data.",
        "details": "Develop a FastAPI endpoint that reads JSON files, extracts bounding box data, and normalizes it for rendering. Store this data in the line_numbers table.",
        "testStrategy": "Unit test the endpoint with sample JSON files to ensure correct extraction and normalization of bounding box data.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Render PDF with Annotations",
        "description": "Use react-pdf-viewer and fabric.js to render PDFs with blue bounding boxes for line numbers.",
        "details": "Integrate react-pdf-viewer to display PDFs. Overlay fabric.js canvas to draw blue bounding boxes based on bounding box data from the database.",
        "testStrategy": "Render a sample PDF and verify that all line numbers are correctly highlighted with blue boxes.",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Настроить базовый рендеринг PDF",
            "description": "Настроить React-компонент для отображения PDF-файла с использованием библиотеки @react-pdf-viewer/core.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 2,
            "title": "Интегрировать Fabric.js для слоя аннотаций",
            "description": "Добавить canvas-элемент с использованием Fabric.js поверх PDF-документа для создания слоя аннотаций. Настроить его размеры в соответствии с размерами отрендеренной PDF-страницы.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 3,
            "title": "Реализовать рисование прямоугольников",
            "description": "Добавить кнопку и реализовать логику для рисования прямоугольника на холсте Fabric.js с помощью мыши.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Line Number List and Interaction",
        "description": "Display a list of line numbers and enable interaction to highlight corresponding boxes on the PDF.",
        "details": "Create a React component to list line numbers. Implement hover and click interactions to highlight corresponding bounding boxes on the PDF.",
        "testStrategy": "Test interactions by hovering and clicking on list items and verifying the correct boxes are highlighted.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Develop Modal for Line Number Editing",
        "description": "Create a modal dialog for editing line numbers with validation and database update.",
        "details": "Use shadcn/ui Dialog to create a modal for editing line numbers. Implement validation using RegEx and update changes to the database via a PATCH API call.",
        "testStrategy": "Test the modal by editing line numbers and verifying that changes are correctly validated and saved to the database.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement WebSocket for Real-time Updates",
        "description": "Enable real-time updates for line number changes using WebSocket.",
        "details": "Set up a WebSocket server with FastAPI to push updates to clients when line numbers are edited. Ensure multiple clients can receive updates simultaneously.",
        "testStrategy": "Simulate multiple clients editing line numbers and verify that all clients receive real-time updates.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Optimize UI Performance",
        "description": "Ensure the UI meets performance requirements for latency and responsiveness.",
        "details": "Implement debouncing for PATCH requests and optimize rendering performance to meet the latency requirement of ≤ 200 ms.",
        "testStrategy": "Measure UI latency during interactions and ensure it meets the specified performance criteria.",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement Security Features",
        "description": "Add security measures including JWT authentication and CORS configuration.",
        "details": "Configure JWT authentication for API endpoints. Set up CORS policies and render PDFs in an iframe sandbox with 'allow-scripts'.",
        "testStrategy": "Test security features by attempting unauthorized access and ensuring proper authentication and CORS policies are enforced.",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Internationalize the UI",
        "description": "Translate the UI to Russian and ensure proper font rendering.",
        "details": "Use i18n libraries to translate the UI text to Russian. Ensure fonts are correctly loaded and rendered using the Inter font family.",
        "testStrategy": "Verify that all UI elements are correctly translated and rendered in Russian.",
        "priority": "low",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement PDF Annotation Export",
        "description": "Enable exporting of annotations to a PDF file for offline use.",
        "details": "Use pdf-lib to export annotations as a new layer in the PDF. Provide an option to download the annotated PDF for offline use.",
        "testStrategy": "Test the export functionality by exporting a PDF and verifying that annotations are correctly included.",
        "priority": "low",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Setup Database and API Infrastructure",
        "description": "Configure PostgreSQL database and FastAPI for handling document and line number data.",
        "details": "Set up PostgreSQL with the provided schema. Implement FastAPI endpoints for document and line number management.",
        "testStrategy": "Test database operations and API endpoints to ensure data is correctly stored and retrieved.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Создать Pydantic-схемы для API",
            "description": "Создать Pydantic-схемы в файле schemas.py для валидации данных, поступающих в API и возвращаемых из него. Нужны схемы для Document и LineNumber.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 14
          },
          {
            "id": 2,
            "title": "Реализовать CRUD-операции для работы с БД",
            "description": "В файле crud.py реализовать функции для создания, чтения, обновления и удаления записей Document и LineNumber в базе данных.",
            "details": "",
            "status": "done",
            "dependencies": [
              "14.1"
            ],
            "parentTaskId": 14
          },
          {
            "id": 3,
            "title": "Реализовать эндпоинт GET /doc/:id",
            "description": "В файле main.py создать эндпоинт, который будет принимать ID документа и возвращать его метаданные вместе со списком всех связанных с ним line numbers.",
            "details": "",
            "status": "done",
            "dependencies": [
              "14.2"
            ],
            "parentTaskId": 14
          },
          {
            "id": 4,
            "title": "Реализовать эндпоинт PATCH /line/:id",
            "description": "В файле main.py создать эндпоинт для обновления существующей записи line number. Он должен принимать ID и новые данные (текст, статус).",
            "details": "",
            "status": "done",
            "dependencies": [
              "14.2"
            ],
            "parentTaskId": 14
          }
        ]
      },
      {
        "id": 15,
        "title": "Refactor Data Model and Processing for Piping Line Numbers",
        "description": "Rename the line_numbers table to ocr_results, create a new line_numbers table, and develop a script to populate it from a ground-truth file.",
        "details": "Begin by renaming the existing 'line_numbers' table in the database to 'ocr_results' to better reflect its purpose of storing OCR data. Next, create a new 'line_numbers' table with the appropriate schema to store line numbers separately. This table should include fields such as 'line_id', 'document_id', 'line_number', and any other necessary metadata. Develop a script to read from a ground-truth file, which contains the correct line numbers, and populate the new 'line_numbers' table with this data. Ensure the script handles various file formats (e.g., CSV, JSON) and includes error handling for data inconsistencies. Update any existing database queries and API endpoints to reflect these changes.",
        "testStrategy": "Verify the renaming of the table by checking the database schema. Test the creation of the new 'line_numbers' table by inserting sample data and querying it. Run the script with a sample ground-truth file and check that the data is correctly inserted into the 'line_numbers' table. Ensure that any API endpoints or database queries that previously used the 'line_numbers' table are updated and functioning correctly. Validate the script's error handling by providing malformed or incomplete ground-truth files and observing the error messages.",
        "status": "pending",
        "dependencies": [
          14
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Migrate database: Rename line_numbers to ocr_results and create new line_numbers table",
            "description": "",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 15
          },
          {
            "id": 2,
            "title": "Create script to populate new line_numbers table from ocr_results and a ground-truth file output/extracted_piping_lines.txt",
            "description": "",
            "details": "",
            "status": "pending",
            "dependencies": [
              "15.1,15.5"
            ],
            "parentTaskId": 15
          },
          {
            "id": 3,
            "title": "Update FastAPI backend to serve data from the new line_numbers table",
            "description": "",
            "details": "",
            "status": "done",
            "dependencies": [
              "15.1"
            ],
            "parentTaskId": 15
          },
          {
            "id": 4,
            "title": "Update React frontend to fetch and display data from the new line_numbers table",
            "description": "",
            "details": "",
            "status": "pending",
            "dependencies": [
              "15.3"
            ],
            "parentTaskId": 15
          },
          {
            "id": 5,
            "title": "Populate ocr_results table with initial OCR data from data/pid_elements.json",
            "description": "",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 15
          },
          {
            "id": 6,
            "title": "Run population script to fill the new line_numbers table",
            "description": "",
            "details": "",
            "status": "pending",
            "dependencies": [
              "15.2"
            ],
            "parentTaskId": 15
          }
        ]
      },
      {
        "id": 16,
        "title": "Implement Interactive P&ID Frame with Pan and Zoom",
        "description": "Develop an interactive frame for P&ID diagrams with panning and zooming capabilities, maintaining A4 page size and interface element positions.",
        "details": "Create an interactive frame for P&ID (Piping and Instrumentation Diagram) that supports panning and zooming. The frame should be set to an A4 page size. Implement panning functionality using a 'hand' tool that allows users to click and drag the diagram. Implement zooming functionality using the mouse wheel and +/- buttons, ensuring that the zoom level can be reset to the default state with a reset button. Ensure that other interface elements such as lists and buttons retain their positions during these interactions. Adjust rectangle coordinates dynamically during zoom to maintain correct positioning. The default cursor should be a 'hand' over the diagram and an 'arrow' over rectangles.",
        "testStrategy": "Verify the frame is correctly sized to A4 dimensions. Test panning by dragging the diagram with the mouse and ensure smooth movement. Test zooming in and out using the mouse wheel and +/- buttons, and verify that the reset button returns the view to the original zoom level. Check that interface elements remain in place during interactions. Confirm that rectangle coordinates are recalculated correctly during zoom. Ensure the cursor changes appropriately between 'hand' and 'arrow' based on context.",
        "status": "done",
        "dependencies": [
          14
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Create A4 Frame Container",
            "description": "Set up a container for the P&ID diagram with dimensions corresponding to an A4 page.",
            "dependencies": [],
            "details": "Use a suitable UI framework to create a container that matches the dimensions of an A4 page. Ensure the container can host the P&ID diagram and other interface elements.\n<info added on 2025-06-23T14:44:08.925Z>\nСоздан контейнер A4 для фрейма P&ID:\n\n**Что реализовано:**\n- Создан компонент PDFFrame с фиксированными размерами A4 (794x1123px при 96 DPI)\n- Добавлены CSS стили с поддержкой темной темы\n- Интегрирован в основной App.tsx компонент\n- Настроена координация событий с Fabric.js canvas (чтобы canvas мог обрабатывать клики по прямоугольникам)\n- Добавлена базовая панель управления с кнопками масштабирования\n\n**Технические детали:**\n- A4 размеры: 794px x 1123px (210mm x 297mm при 96 DPI)\n- Контейнер имеет overflow: hidden для обрезки содержимого\n- Добавлена логика предотвращения конфликтов между PDFFrame и Fabric.js событиями мыши\n- Стили адаптированы под светлую и темную темы\n\n**Файлы:**\n- app/src/components/PDFFrame.tsx - основной компонент\n- app/src/components/PDFFrame.css - стили\n- app/src/App.tsx - интеграция с основным приложением\n</info added on 2025-06-23T14:44:08.925Z>",
            "status": "done",
            "testStrategy": "Verify the container dimensions match A4 size and can host the diagram without overflow."
          },
          {
            "id": 2,
            "title": "Implement Panning Functionality",
            "description": "Enable panning of the P&ID diagram using a 'hand' tool for click-and-drag interaction.",
            "dependencies": [
              1
            ],
            "details": "Add event listeners for mouse down, move, and up events to allow users to drag the diagram. Change the cursor to a 'hand' when over the diagram.\n<info added on 2025-06-23T14:49:48.060Z>\nПроблемы обнаружены:\n1. Фрейм был в вертикальной ориентации - исправлено на горизонтальную A4 (1123x794px)\n2. Перетаскивание не работало из-за конфликтов событий мыши\n\nИсправления:\n- Изменены размеры A4 на landscape ориентацию (1123x794px)\n- Переработана логика панорамирования - используются document-level события для лучшего отслеживания\n- Убрана неправильная логика применения панорамирования к координатам прямоугольников (теперь панорамирование обрабатывается через CSS transform)\n- Добавлена проверка клавиш Ctrl/Alt для предотвращения конфликтов с canvas событиями\n- Улучшены CSS стили для курсоров\n\nТехническая реализация:\n- document.addEventListener для mousemove/mouseup во время панорамирования\n- CSS transform применяется к pdf-frame-content\n- Курсор: grab/grabbing с наследованием для canvas\n</info added on 2025-06-23T14:49:48.060Z>\n<info added on 2025-06-23T14:57:19.304Z>\n🔧 Исправил конфликт с режимом рисования прямоугольников:\n\n**Проблема:** При клике и перетаскивании активировался режим рисования прямоугольника вместо панорамирования.\n\n**Решение:**\n1. Добавил состояние `isPanning` в App.tsx для отслеживания активного панорамирования\n2. Добавил callback `onPanningChange` в PDFFrame для уведомления родительского компонента\n3. Изменил логику режима рисования: `if (isDrawingMode && !isPanning)` - рисование отключается во время панорамирования\n4. Отключил обработку кликов canvas во время панорамирования: `if (isPanning) return;`\n5. Обновил зависимости useEffect для корректной работы\n\n**Техническая реализация:**\n- PDFFrame уведомляет App о состоянии панорамирования через callback\n- Режим рисования и клики canvas блокируются во время панорамирования  \n- Состояние синхронизируется между компонентами\n\nТеперь панорамирование должно работать без конфликтов с режимом рисования.\n</info added on 2025-06-23T14:57:19.304Z>\n<info added on 2025-06-23T15:05:24.613Z>\n✅ Панорамирование реализовано с правой кнопкой мыши!\n\n**Финальное решение:**\n1. **Убрали кнопку \"Draw Rectangle\"** и весь код режима рисования для устранения конфликтов\n2. **Переключили панорамирование на правую кнопку мыши** (button === 2)\n3. **Добавили preventDefault для контекстного меню** чтобы оно не появлялось при правом клике\n4. **Изменили курсоры:**\n   - По умолчанию: `default` (стрелка)\n   - Над прямоугольниками: `pointer` (рука с пальцем)\n   - При панорамировании: `grabbing` (сжатая рука)\n\n**Результат:**\n- ✅ Левая кнопка мыши - клики по прямоугольникам без конфликтов\n- ✅ Правая кнопка мыши - панорамирование схемы\n- ✅ Колесо мыши - масштабирование\n- ✅ Кнопки +/- и сброс - управление масштабом\n- ✅ Никаких случайных прямоугольников при перетаскивании\n\n**Техническая реализация:**\n- `onMouseDown` с проверкой `e.button === 2`\n- `onContextMenu` с `preventDefault()`\n- Удален весь код isDrawingMode и связанные useEffect\n</info added on 2025-06-23T15:05:24.613Z>",
            "status": "done",
            "testStrategy": "Test panning by dragging the diagram in various directions and ensure smooth movement."
          },
          {
            "id": 3,
            "title": "Implement Zooming with Mouse Wheel",
            "description": "Enable zooming in and out of the P&ID diagram using the mouse wheel.",
            "dependencies": [
              1
            ],
            "details": "Attach event listeners to the mouse wheel to adjust the zoom level of the diagram. Ensure zooming is centered on the cursor position.",
            "status": "done",
            "testStrategy": "Test zooming in and out using the mouse wheel and verify the diagram scales correctly."
          },
          {
            "id": 4,
            "title": "Implement Zooming with Buttons",
            "description": "Add +/- buttons to control zooming of the P&ID diagram.",
            "dependencies": [
              1
            ],
            "details": "Create UI buttons for zooming in and out. Attach event handlers to these buttons to adjust the zoom level incrementally.",
            "status": "done",
            "testStrategy": "Test zooming functionality using the buttons and ensure consistent behavior with mouse wheel zooming."
          },
          {
            "id": 5,
            "title": "Implement Zoom Reset Button",
            "description": "Add a button to reset the zoom level to the default state.",
            "dependencies": [
              3,
              4
            ],
            "details": "Create a reset button and attach an event handler to set the zoom level back to the initial state.",
            "status": "done",
            "testStrategy": "Test the reset button to ensure it returns the diagram to the default zoom level."
          },
          {
            "id": 6,
            "title": "Adjust Rectangle Coordinates on Zoom",
            "description": "Ensure rectangle coordinates are dynamically adjusted during zoom to maintain correct positioning.",
            "dependencies": [
              3,
              4
            ],
            "details": "Implement logic to recalculate rectangle positions based on the current zoom level, ensuring they remain correctly aligned with the diagram.\n<info added on 2025-06-23T15:09:35.246Z>\n✅ Реализован динамический пересчет координат прямоугольников + улучшение качества PDF при масштабировании!\n\n**Проблема:** При приближении качество PDF не улучшалось, текст был нечитаемым.\n\n**Решение:**\n1. **Добавлено состояние `pdfScale`** для отслеживания разрешения PDF\n2. **Динамическое изменение разрешения PDF** в зависимости от уровня масштабирования:\n   - `const newPdfScale = Math.min(Math.max(currentZoom, 1), 3)` \n   - Масштаб PDF изменяется от 1x до 3x в зависимости от zoom\n3. **Передача `scale={pdfScale}` в компонент Page** для увеличения разрешения рендеринга\n4. **Обновлены координаты прямоугольников** с учетом нового масштаба PDF:\n   - `line.x_coord / scale * pdfScale` - координаты масштабируются пропорционально\n5. **Добавлена зависимость `pdfScale` в useEffect** для перерисовки при изменении разрешения\n\n**Результат:**\n- ✅ При приближении качество PDF динамически улучшается\n- ✅ Текст остается четким и читаемым при любом уровне масштабирования  \n- ✅ Прямоугольники точно позиционируются относительно улучшенного PDF\n- ✅ Плавное изменение качества без скачков\n\n**Техническая реализация:**\n- useEffect с зависимостью от currentZoom обновляет pdfScale\n- React-PDF Page компонент получает динамический scale prop\n- Координаты аннотаций пересчитываются с учетом pdfScale\n</info added on 2025-06-23T15:09:35.246Z>",
            "status": "done",
            "testStrategy": "Test by zooming in and out and verifying that rectangles maintain their relative positions."
          },
          {
            "id": 7,
            "title": "Maintain Interface Element Positions",
            "description": "Ensure that interface elements such as lists and buttons retain their positions during panning and zooming.",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "Use fixed positioning or similar techniques to keep interface elements static relative to the container.",
            "status": "done",
            "testStrategy": "Test panning and zooming to ensure interface elements do not move unexpectedly."
          },
          {
            "id": 8,
            "title": "Implement Cursor Management",
            "description": "Manage cursor changes between 'hand' over the diagram and 'arrow' over rectangles.",
            "dependencies": [
              2,
              6
            ],
            "details": "Add logic to switch the cursor style based on the current mouse position relative to the diagram and rectangles.",
            "status": "done",
            "testStrategy": "Test cursor changes by moving the mouse over different areas of the diagram and rectangles."
          }
        ]
      },
      {
        "id": 17,
        "title": "Add Touch Gesture Support for Mac and Windows Trackpads",
        "description": "Implement touch gesture support for trackpads on Mac and Windows, including two-finger panning and pinch-to-zoom, with device type auto-detection.",
        "details": "To enhance user interaction, implement touch gesture support for trackpads on both Mac and Windows systems. This includes enabling two-finger panning and pinch-to-zoom gestures. Begin by detecting the type of input device using platform-specific APIs or libraries. For Mac, consider using the NSEvent class for gesture recognition, and for Windows, explore the Windows.Devices.Input namespace. Ensure compatibility with existing mouse controls, where right-clicking allows panning. Integrate this functionality into the existing interactive frame developed in Task 16, ensuring seamless operation with the current panning and zooming features. Consider using a library like Hammer.js for cross-platform gesture recognition if applicable.",
        "testStrategy": "Test the implementation on both Mac and Windows systems. Verify that two-finger panning moves the diagram smoothly and that pinch-to-zoom adjusts the zoom level correctly. Ensure that the device type is correctly detected and that mouse controls (right-click for panning) remain functional. Conduct user testing to confirm intuitive gesture recognition and responsiveness. Additionally, test the integration with the existing interactive frame to ensure no conflicts or performance issues arise.",
        "status": "done",
        "dependencies": [
          16
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Add Mode Switch for Mouse/Touchpad Input",
        "description": "Implement a mode switch to toggle between mouse and touchpad input modes, ensuring correct gesture recognition on various devices.",
        "details": "To enhance input device compatibility, implement a mode switch that allows users to toggle between mouse and touchpad input modes. In touchpad mode, two-finger movements should trigger panning (wheel events) and pinch gestures should trigger zooming. In mouse mode, right-click should enable panning and the scroll wheel should control zooming. Address the specific issue with Huawei D16 touchpads where two-finger gestures are incorrectly recognized as wheel events. This may involve device-specific gesture recognition adjustments or overrides. Ensure the mode switch is easily accessible within the user interface, possibly as a toggle button or a settings option. Consider using platform-specific APIs to accurately detect and differentiate between input devices and their gestures, building upon the existing gesture support implemented in Task 17.",
        "testStrategy": "Test the mode switch functionality on various devices, including standard mice and touchpads, as well as specific models like the Huawei D16. Verify that in touchpad mode, two-finger gestures correctly trigger panning and pinch gestures trigger zooming. In mouse mode, ensure right-click enables panning and the scroll wheel adjusts zoom levels. Specifically test the Huawei D16 to confirm that two-finger gestures are not misinterpreted as wheel events. Ensure the mode switch is intuitive and functions correctly across different platforms.",
        "status": "done",
        "dependencies": [
          16,
          17
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Fix Pinch Gesture Handling in Touchpad Mode",
        "description": "Resolve issues with pinch gestures in touchpad mode by preventing browser zoom and correctly handling pinch events within PDF frames.",
        "details": "To address the pinch gesture issue in touchpad mode, first ensure that the browser's default zoom behavior is disabled. This can be achieved by adding a meta viewport tag with 'user-scalable=no' and setting maximum scale to 1. Additionally, implement CSS rules to prevent zooming, such as 'touch-action: none' on relevant elements. For handling pinch events within PDF frames, enhance the gesture detection logic to accurately differentiate between pinch and other gestures. This may involve using JavaScript libraries or APIs that provide more granular control over touch events. Ensure compatibility with existing gesture handling logic from Task 18 and Task 17, which implemented mode switching and touch gesture support.",
        "testStrategy": "Test the implementation by using a touchpad on various devices to perform pinch gestures within a PDF frame. Verify that the browser does not zoom and that the pinch gesture is correctly detected and handled within the frame. Ensure that the changes do not interfere with other touch gestures implemented in Task 17 and Task 18. Conduct tests on different browsers to ensure cross-browser compatibility.",
        "status": "done",
        "dependencies": [
          17,
          18
        ],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-21T07:11:24.410Z",
      "updated": "2025-06-23T15:41:44.528Z",
      "description": "Tasks for master context"
    }
  }
}